package design.pattern.study.behavioral.templatemethod;

/**
 * <템플릿 메서드 패턴___행위>
 *   - 알고리즘의 "구조를 메서드에 정의"하고 하위 클래스에서 알고리즘 구조의 변경없이 알고리즘을 "재정의" 하는 패턴
 *   - 공통적인 프로세스를 묶어 주기
 *   - "일정한 프로세스"를 가진 요구사항을 템플릿 메서드 패턴을 이용하여 구현할 수 있다
 *   - 구현하려는 알고리즘이 "일정한 프로세스 또는 변경 가능성"이 있을 때 사용
 *   - 일정한 프로세스 == 여러 단계로 나눌 수 있다
 *   - 템플릿 메서드 구현 순서
 *     - 알고리즘을 여러 단계로 나눈다(== 요구사항을 여러 단계로 나눈다)
 *     - 나눠진 알고리즘의 단계를 메서드로 선언한다
 *     - 알고리즘을 수행할 템플릿 메서드를 만든다
 *     - 하위 클래스에서 나눠진 메서드들을 구현한다
 *
 * 예제 요구사항
 *   - 신작 게임의 접속을 구현해주세요
 *   - 유저가 게임 접속 시 다음을 고려해야 합니다
 *     - step1. 보안 과정
 *     - step2. 인증 과정
 *     - step3. 권한 과정
 *     - step4. 접속 과정
 *     - 여가부에서 밤 10시 이후 접속을 제한(추가 요구사항)
 *
 * <관통되는 개념 요약>
 *    - 단계가 있는 기능들을 하나로 묶어주는 메서드를 정의하여 사용하는 것
 *    - 프로세스를 단계별로 선언하고 "단계들을 하나로 묶어주는" 메서드 템플릿 메서드 패턴을 정의하고 구체적인 내용은 구현체를 이용하여 정의
 *    - 추가 요구사항이 들어올 경우 구현 객체(몸통)만 수정해주면 됨(로직에 따라서 템플릿 메서드 도 살짝 변경될 수 있음)
 *
 *    - 행위(기능) 추상화 객체 : 구현 객체들의 공통 분모
 *    - 행위(기능) 구현 객체 : 몸통
 *    - 행위(기능) 사용 객체 : 완성본 호출하여 사용
 */
public class Main {

    public static void main(String[] args) {
        AbstGameConnectHelper helper = new DefaultGameConnectHelper();

        // 원래는 패키지를 나눠서 추상 클래스와 구현체가 라이브러리 형식으로 배포된 것을 requestConnection()만 호출하여 사용
        helper.requestConnection("아이디 암호 등 접속 정보");
    }

}/////
