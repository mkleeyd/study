package design.pattern.study.structural.adapter;

/**
 * <어댑터 패턴___구조>
 *   - 연관성 없는 두 객체 묶어 사용하기
 *   - 이미 구현된 알고리즘을 요구사항에 맞게 구현하여 사용할 수 있다
 *
 * 예제 요구사항
 *   - 두 수에 대한 다음 연산을 수행하는 객체를 만들어 주세요
 *     - 수의 두 배의 수를 반환 : twiceOf(Float) : Float
 *     - 수의 반(1/2)의 수를 반환 : halfOf(Float) : Float
 *   - 구현 객체 이름을 "Adapter"로 해주세요
 *   - Math 클래스에서 두 배와 절반을 구하는 함수는 "이미 구현"되어 있습니다.
 *   
 *   - Math 클래스에 새롭게 두 배를 구할 수 있는 함수가 추가 되었습니다.
 *   - 새로 구현된 알고리즘을 이용하도록 프로그램을 수정하세요
 *   - 절반을 구하는 기능에서 로그를 찍는 기능을 추가해 보세요
 *
 * <관통되는 개념 요약>
 *    - 추가 요구사항이 들어올 경우 구현 객체(몸통)만 수정해주면 됨
 *    
 *    - 행위(기능) 추상화 객체 : 이미 만들어져 있는 알고리즘 객체에서 필요한 기능만을 선언하여 역할로 추상화 하는 "추상적인 접근점 객체 역할"
 *    - 행위(기능) 구현 객체(몸통) : 이미 만들어져 있는 알고리즘 객체의 필요 기능만을 구현 및 수정하여 만드는 "몸통 객체"
 *    - 행위(기능) 사용 객체(완성본 호출) : 부품들이 하나로 모여 만들어진 완성본 몸통 객체를 "호출"하여 직접 사용하는 객체
 *
 */
public class Main {

    public static void main(String[] args) {
        Adapter adapter = new AdapterImpl();
        System.out.println(adapter.twiceOf(100f));
        System.out.println(adapter.halfOf(80f));
        
//        미리 구현된 객체의 기능을 사용하고 있을 때 추가 요구사항이 들어왔다면 어댑터를 이용하여 해결 
        
    }

}/////
